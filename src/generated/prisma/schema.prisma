// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модели, которые были перенесены из Appwrite

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  password   String
  workspaces Workspace[]
  tasks      Task[]      @relation("TaskAssignee")
  members    Member[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Workspace {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String?
  inviteCode String    @unique
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects   Project[]
  tasks      Task[]
  members    Member[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Project {
  id          String    @id @default(uuid())
  name        String
  imageUrl    String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  name        String
  status      TaskStatus
  assigneeId  String
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  position    Int
  dueDate     DateTime?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Member {
  id          String     @id @default(uuid())
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        MemberRole
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([workspaceId, userId])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum MemberRole {
  ADMIN
  MEMBER
}
